name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE: ngumonelson123/combined-image
      IMAGE_TAG: v1.2.${{ github.run_number }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build --build-arg SECRET_KEY=django-insecure-xyz123 \
          -t $IMAGE:$IMAGE_TAG \
          -t $IMAGE:latest .

        docker push $IMAGE:$IMAGE_TAG
        docker push $IMAGE:latest


    - name: Create ConfigMap
      run: |
        kubectl create configmap usenlease-config \
         --from-literal=DJANGO_ENV=${{ secrets.DJANGO_ENV }} \
         --from-literal=ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
         --from-literal=CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} \
         --from-literal=CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} \
         --from-literal=AUTH_COOKIE_DOMAIN=${{ secrets.AUTH_COOKIE_DOMAIN }} \
         --from-literal=AUTH_COOKIE_HTTPONLY=${{ secrets.AUTH_COOKIE_HTTPONLY }} \
         --from-literal=AUTH_COOKIE_NAME=${{ secrets.AUTH_COOKIE_NAME }} \
         --from-literal=AUTH_COOKIE_PATH=${{ secrets.AUTH_COOKIE_PATH }} \
         --from-literal=AUTH_COOKIE_REFRESH=${{ secrets.AUTH_COOKIE_REFRESH }} \
         --from-literal=AUTH_COOKIE_SAMESITE=${{ secrets.AUTH_COOKIE_SAMESITE }} \
         --from-literal=AUTH_COOKIE_SECURE=${{ secrets.AUTH_COOKIE_SECURE }} \
         --from-literal=DOMAIN_URL=${{ secrets.DOMAIN_URL }} \
         --from-literal=EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
         --from-literal=EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
         --from-literal=EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
         --from-literal=EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }} \
         --from-literal=RECIPIENT_LIST=${{ secrets.RECIPIENT_LIST }} \
         --from-literal=STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }} \
         --from-literal=VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} \
         --from-literal=VITE_ENCRYPTION_KEY=${{ secrets.VITE_ENCRYPTION_KEY }} \
         --from-literal=NODE_VERSION=${{ secrets.NODE_VERSION }} \
         --from-literal=GS_BUCKET_NAME=${{ secrets.GS_BUCKET_NAME }} \
         --from-literal=MALLOC_ARENA_MAX=${{ secrets.MALLOC_ARENA_MAX }} \
         --namespace=usenlease \
         --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Secret
      run: |
        kubectl create secret generic usenlease-secrets \
         --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} \
         --from-literal=DATABASE_URL=${{ secrets.DATABASE_URL }} \
         --from-literal=REDIS_URL=${{ secrets.REDIS_URL }} \
         --from-literal=EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
         --from-literal=GOOGLE_APPLICATION_CREDENTIALS_CONTENT=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }} \
         --from-literal=STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
         --namespace=usenlease \
         --dry-run=client -o yaml | kubectl apply -f -

    - name: Update Kubernetes Manifests
      run: |
        git config --global user.email "ci@usenlease.dev"
        git config --global user.name "GitHub Actions"

        sed -i "s|image: $IMAGE:.*|image: $IMAGE:$IMAGE_TAG|" k8s/usenlease-deployment.yaml
        git add k8s/
        git commit -m "Update image to $IMAGE:$IMAGE_TAG [skip ci]" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/Denislive/usenlease.git HEAD:master

    - name: Deploy to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      run: |
        echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
        docker tag $IMAGE:$IMAGE_TAG registry.heroku.com/$HEROKU_APP_NAME/web
        docker push registry.heroku.com/$HEROKU_APP_NAME/web
        heroku container:release web --app $HEROKU_APP_NAME

    - name: Send Slack notification on success
      if: success()
      run: |
        IMAGE=${{ env.IMAGE }}
        IMAGE_TAG=${{ env.IMAGE_TAG }}
        curl -X POST -H 'Content-type: application/json' --data "{
          \"text\": \"✅ CI/CD Success: Build #${{ github.run_number }} pushed Docker image and updated manifests. Image: ${IMAGE}:${IMAGE_TAG}\"
        }" ${{ secrets.SLACK_WEBHOOK }}

    - name: Send Slack notification on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{
          \"text\": \"❌ CI/CD Failed: Build #${{ github.run_number }} failed. Check GitHub logs.\"
        }" ${{ secrets.SLACK_WEBHOOK }}
###########end of file###