name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  deploy-infra:
    name: Deploy Infrastructure with Terraform (HCP)
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Trigger Terraform Cloud Run
        run: |
          echo "Triggering Terraform Cloud Run..."
          PAYLOAD='{"data":{"attributes":{"message":"CI/CD update","is-destroy":false},"type":"runs","relationships":{"workspace":{"data":{"type":"workspaces","id":"'"${{ secrets.TF_WORKSPACE_ID }}"'"}}}}}}'
          curl -X POST https://app.terraform.io/api/v2/workspaces/${{ secrets.TF_WORKSPACE_ID }}/runs \
            -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            -H "Content-Type: application/vnd.api+json" \
            -d "$PAYLOAD"

  build-and-deploy:
    name: Build and Deploy App
    runs-on: ubuntu-latest
    needs: deploy-infra
    env:
      IMAGE: ngumonelson123/combined-image
      IMAGE_TAG: v1.2.${{ github.run_number }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          echo "Updating kubeconfig for EKS..."
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.CLUSTER_NAME }}

      - name: Verify kubectl configuration
        run: |
          echo "Verifying kubectl configuration..."
          kubectl config view
          kubectl cluster-info
          
      - name: Create namespace
        run: |
          kubectl create namespace usenlease --dry-run=client -o yaml | kubectl apply -f - --validate=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build --build-arg SECRET_KEY=django-insecure-xyz123 \
            -t $IMAGE:$IMAGE_TAG \
            -t $IMAGE:latest .
          docker push $IMAGE:$IMAGE_TAG
          docker push $IMAGE:latest

      - name: Create ConfigMap
        run: |
          # Create a temporary file for the ConfigMap
          cat > configmap.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: usenlease-config
            namespace: usenlease
          data:
            DJANGO_ENV: "${{ secrets.DJANGO_ENV }}"
            ALLOWED_HOSTS: "${{ secrets.ALLOWED_HOSTS }}"
            CORS_ALLOWED_ORIGINS: "${{ secrets.CORS_ALLOWED_ORIGINS }}"
            CSRF_TRUSTED_ORIGINS: "${{ secrets.CSRF_TRUSTED_ORIGINS }}"
            AUTH_COOKIE_DOMAIN: "${{ secrets.AUTH_COOKIE_DOMAIN }}"
            AUTH_COOKIE_HTTPONLY: "${{ secrets.AUTH_COOKIE_HTTPONLY }}"
            AUTH_COOKIE_NAME: "${{ secrets.AUTH_COOKIE_NAME }}"
            AUTH_COOKIE_PATH: "${{ secrets.AUTH_COOKIE_PATH }}"
            AUTH_COOKIE_REFRESH: "${{ secrets.AUTH_COOKIE_REFRESH }}"
            AUTH_COOKIE_SAMESITE: "${{ secrets.AUTH_COOKIE_SAMESITE }}"
            AUTH_COOKIE_SECURE: "${{ secrets.AUTH_COOKIE_SECURE }}"
            DOMAIN_URL: "${{ secrets.DOMAIN_URL }}"
            EMAIL_HOST: "${{ secrets.EMAIL_HOST }}"
            EMAIL_HOST_USER: "${{ secrets.EMAIL_HOST_USER }}"
            EMAIL_PORT: "${{ secrets.EMAIL_PORT }}"
            EMAIL_USE_SSL: "${{ secrets.EMAIL_USE_SSL }}"
            RECIPIENT_LIST: "${{ secrets.RECIPIENT_LIST }}"
            STRIPE_PUBLIC_KEY: "${{ secrets.STRIPE_PUBLIC_KEY }}"
            VITE_API_BASE_URL: "${{ secrets.VITE_API_BASE_URL }}"
            VITE_ENCRYPTION_KEY: "${{ secrets.VITE_ENCRYPTION_KEY }}"
            NODE_VERSION: "${{ secrets.NODE_VERSION }}"
            GS_BUCKET_NAME: "${{ secrets.GS_BUCKET_NAME }}"
            MALLOC_ARENA_MAX: "${{ secrets.MALLOC_ARENA_MAX }}"
          EOF
          
          # Apply the ConfigMap
          kubectl apply -f configmap.yaml --validate=false

      - name: Create Secret
        run: |
          # Create a temporary file for the Secret
          cat > secret.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: usenlease-secrets
            namespace: usenlease
          type: Opaque
          stringData:
            SECRET_KEY: "${{ secrets.SECRET_KEY }}"
            DATABASE_URL: "${{ secrets.DATABASE_URL }}"
            REDIS_URL: "${{ secrets.REDIS_URL }}"
            EMAIL_HOST_PASSWORD: "${{ secrets.EMAIL_HOST_PASSWORD }}"
            GOOGLE_APPLICATION_CREDENTIALS_CONTENT: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}"
            STRIPE_SECRET_KEY: "${{ secrets.STRIPE_SECRET_KEY }}"
          EOF
          
          # Apply the Secret
          kubectl apply -f secret.yaml --validate=false

      - name: Update Kubernetes Manifests
        run: |
          git config --global user.email "ci@usenlease.dev"
          git config --global user.name "GitHub Actions"
          if [ -f k8s/usenlease-deployment.yaml ]; then
            sed -i "s|image: $IMAGE:.*|image: $IMAGE:$IMAGE_TAG|" k8s/usenlease-deployment.yaml
            git add k8s/
            git commit -m "Update image to $IMAGE:$IMAGE_TAG [skip ci]" || echo "No changes to commit"
            git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/Denislive/usenlease.git HEAD:master
          else
            echo "k8s/usenlease-deployment.yaml not found, skipping image update."
          fi

      - name: Enable kubectl debug logging
        run: |
          export KUBECTL_LOG_LEVEL=9
          echo "enabling KUBECTL_LOG_LEVEL=9" >> $GITHUB_ENV

      - name: Apply Kubernetes Manifests
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/ --validate=false

      - name: Trigger ArgoCD Sync
        continue-on-error: true
        run: |
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          
          # Sync ArgoCD application
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          argocd app sync usenlease-app
          argocd app wait usenlease-app
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
          docker tag $IMAGE:$IMAGE_TAG registry.heroku.com/$HEROKU_APP_NAME/web
          docker push registry.heroku.com/$HEROKU_APP_NAME/web
          heroku container:release web --app $HEROKU_APP_NAME

      - name: Slack Success Notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"✅ CI/CD Success: Docker image ${IMAGE}:${IMAGE_TAG} deployed to EKS + Heroku.\"
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Failure Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"❌ CI/CD Failed: Check logs for Build #${{ github.run_number }}.\"
          }" ${{ secrets.SLACK_WEBHOOK }}
#####