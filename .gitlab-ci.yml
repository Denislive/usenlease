stages:
  - setup
  - check_prerequisites
  - clone_repository
  - build_and_push_image
  - deploy_to_heroku
  - deploy_to_google_cloud

variables:
  IMAGE: 'ngumonelson123/combined-image'
  GOOGLE_CLOUD_PROJECT: 'buoyant-song-448609-h9'
  GOOGLE_CLOUD_ZONE: 'europe-west2-a'
  POSTGRES_DB: 'usenlease_db'
  HEROKU_APP_NAME: 'usenleaseprod'

# Declare variables from GitLab CI/CD Settings (Use masked variables where applicable)

before_script:
  - echo "Setting up environment variables"
  - echo "GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}" > .env
  - echo "GOOGLE_CLOUD_ZONE=${GOOGLE_CLOUD_ZONE}" >> .env
  - echo "IMAGE=${IMAGE}" >> .env
  - echo "POSTGRES_DB=${POSTGRES_DB}" >> .env

# Setup stage - Create .env file
setup:
  stage: setup
  script:
    - echo "Creating .env file"
    - cat .env

# Check Prerequisites - Docker installation & shell check
check_prerequisites:
  stage: check_prerequisites
  script:
    - |
      echo "Checking shell and Docker installation..."
      echo "Current shell: $SHELL"
      docker --version || exit 1  # Ensures Docker is available

# Clone Repository - Git clone from the repo
clone_repository:
  stage: clone_repository
  script:
    - echo "Cloning the repository..."
    - git clone https://github.com/Denislive/usenlease.git

# Build and Push Docker Image to Docker Hub
build_and_push_image:
  stage: build_and_push_image
  script:
    - |
      echo 'Building and pushing Docker image to Docker Hub...'
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      docker build --build-arg SECRET_KEY="django-insecure-^5zv2&aef@n*hi0icmu7lji6bqf0r&d@!x)%*gq-e^w)2e^kl!" -t ${IMAGE}:v1.1.0 -f Dockerfile .
      docker push ${IMAGE}:v1.1.0

# Deploy to Heroku
deploy_to_heroku:
  stage: deploy_to_heroku
  script:
    - |
      echo 'Deploying to Heroku...'
      echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
      docker tag ${IMAGE}:v1.1.0 registry.heroku.com/$HEROKU_APP_NAME/web
      docker push registry.heroku.com/$HEROKU_APP_NAME/web
      heroku container:release web --app $HEROKU_APP_NAME

# Deploy to Google Cloud
deploy_to_google_cloud:
  stage: deploy_to_google_cloud
  script:
    - |
      echo 'Deploying to Google Cloud...'
      INSTANCE_NAME="usenlease-instance"
      INSTANCE_EXISTS=$(gcloud compute instances list --filter="name=${INSTANCE_NAME}" --format="value(name)" --project=${GOOGLE_CLOUD_PROJECT})

      if [ "$INSTANCE_EXISTS" = "$INSTANCE_NAME" ]; then
          echo "Instance ${INSTANCE_NAME} already exists. Skipping creation..."
      else
          echo "Instance ${INSTANCE_NAME} does not exist. Creating it..."
          gcloud auth activate-service-account --key-file="${GOOGLE_CLOUD_KEY}"
          gcloud compute instances create ${INSTANCE_NAME} \
              --project=${GOOGLE_CLOUD_PROJECT} \
              --zone=${GOOGLE_CLOUD_ZONE} \
              --tags=http-server,https-server \
              --metadata=startup-script='#!/bin/bash
              apt-get update
              apt-get install -y docker.io
              systemctl start docker
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
              docker pull ${IMAGE}:v1.1.0
              docker-compose up -d'
      fi

after_script:
  - echo "Pipeline completed!"
