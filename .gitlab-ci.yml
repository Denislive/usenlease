image: docker:latest  # Use the official Docker image

services:
  - docker:dind  # Start Docker-in-Docker service

stages:
  - setup
  - clone
  - build
  - test
  - deploy
  - push_to_gitlab

variables:
  GITHUB_REPO: "github.com/Denislive/usenlease.git"  # Update with the correct GitHub repo URL
  GITHUB_BRANCH: "master"
  IMAGE: 'ngumonelson123/combined-image'  # Replace with your Docker image name
  DOCKER_HOST: tcp://docker:2375  # Connect to the Docker daemon
  GITHUB_TOKEN: ${GITHUB_TOKEN}  # GitHub PAT stored in GitLab CI/CD variables
  GITLAB_TOKEN: ${GITLAB_TOKEN}  # GitLab PAT stored in GitLab CI/CD variables
  GITLAB_REPO: "gitlab.com/yourusername/your-repo.git"  # Update with your GitLab repo URL

# Setup stage - Install dependencies and set up the environment
setup:
  stage: setup
  script:
    - echo "Setting up environment..."
    - apk add --no-cache git curl bash  # Install necessary tools
    - echo "Environment setup complete."

# Clone stage - Clone the latest code from GitHub
clone:
  stage: clone
  script:
    - echo "Cloning the latest code from GitHub..."
    - rm -rf ./*  # Remove existing files in the directory
    - rm -rf .[!.]*  # Remove hidden files in the directory
    - echo "Cloning GitHub repository using GitHub Token..."
    - git clone https://oauth2:${GITHUB_TOKEN}@${GITHUB_REPO} --branch ${GITHUB_BRANCH} .
    - echo "Latest code pulled successfully."

# Build stage - Build the Docker image
build:
  stage: build
  script:
    - echo "Building Docker image..."
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" || { echo "Docker login failed"; exit 1; }
    - docker build --build-arg SECRET_KEY='django-insecure-^5zv2&aef@n*hi0icmu7lji6bqf0r&d@!x)%*gq-e^w)2e^kl!' -t ${IMAGE}:v1.1.0 -f Dockerfile . || { echo "Docker build failed"; exit 1; }
    - echo "Listing all Docker images for verification:"
    - docker images || { echo "Failed to list Docker images"; exit 1; }
    - echo "Docker image built successfully."

# Test stage - Run tests (optional, customize as needed)
test:
  stage: test
  script:
    - echo "Running tests..."
    - echo "Tests completed successfully."

# Deploy stage - Push the Docker image and deploy to Heroku/Google Cloud
deploy:
  stage: deploy
  script:
    - |
      echo "Deploying the application..."
      # Check if the Docker image exists locally
      IMAGE_EXISTS=$(docker images -q ${IMAGE}:v1.1.0)
      if [ -z "$IMAGE_EXISTS" ]; then
        echo "Docker image does not exist locally. Build might have failed."
        exit 1
      fi
      echo "Docker image exists locally. Proceeding with deployment."

      # Push Docker image to Docker Hub
      docker push ${IMAGE}:v1.1.0 || { echo "Docker push failed"; exit 1; }

      # Deploy to Heroku (example - customize as needed)
      echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com || { echo "Heroku Docker login failed"; exit 1; }
      docker tag ${IMAGE}:v1.1.0 registry.heroku.com/$HEROKU_APP_NAME/web || { echo "Docker tag failed"; exit 1; }
      docker push registry.heroku.com/$HEROKU_APP_NAME/web || { echo "Docker push to Heroku failed"; exit 1; }
      heroku container:release web --app $HEROKU_APP_NAME || { echo "Heroku release failed"; exit 1; }

# Push to GitLab stage - Push the changes back to GitLab
push_to_gitlab:
  stage: push_to_gitlab
  script:
    - echo "Pushing changes to GitLab repository..."
    - git remote add gitlab https://oauth2:${GITLAB_TOKEN}@${GITLAB_REPO}
    - git push gitlab ${GITHUB_BRANCH}:${GITHUB_BRANCH} || { echo "GitLab push failed"; exit 1; }
    - echo "Changes pushed to GitLab successfully."

after_script:
  - echo "Pipeline completed!"
