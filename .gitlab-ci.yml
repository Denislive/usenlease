image: docker:latest  # Use the official Docker image

services:
  - docker:dind  # Start Docker-in-Docker service

stages:
  - setup
  - clone
  - build
  - test
  - deploy

variables:
  GITHUB_REPO: "git@github.com:Denislive/usenlease.git"  # Use SSH URL
  GITHUB_BRANCH: "master"
  IMAGE: 'ngumonelson123/combined-image'  # Replace with your Docker image name
  DOCKER_HOST: tcp://docker:2375  # Connect to the Docker daemon

# Setup stage - Install dependencies and set up the environment
setup:
  stage: setup
  script:
    - echo "Setting up environment..."
    - apk add --no-cache git curl bash  # Install necessary tools
    - echo "Environment setup complete."

# Clone stage - Clone the GitHub repository using SSH
clone:
  stage: clone
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
  script:
    - echo "Cleaning up existing directory..."
    - find . -mindepth 1 -delete  # Deletes everything inside the directory but keeps the root
    - git clone --branch master git@github.com:Denislive/usenlease.git .
    - echo "Repository cloned successfully."

# Build stage - Build the Docker image
build:
  stage: build
  script:
    - echo "Building Docker image..."
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" || { echo "Docker login failed"; exit 1; }
    - ls -la  # Debugging: List directory contents
    - docker build --build-arg SECRET_KEY='django-insecure-^5zv2&aef@n*hi0icmu7lji6bqf0r&d@!x)%*gq-e^w)2e^kl!' -t ${IMAGE}:v1.1.0 -f Dockerfile . || { echo "Docker build failed"; exit 1; }
    - echo "Listing all Docker images for verification:"
    - docker images || { echo "Failed to list Docker images"; exit 1; }
    - echo "Docker image built successfully."

# Test stage - Run tests (optional, customize as needed)
test:
  stage: test
  script:
    - echo "Running tests..."
    - echo "Tests completed successfully."

# Deploy stage - Push the Docker image and deploy to Heroku/Google Cloud
deploy:
  stage: deploy
  script:
    - |
      set -e
      echo "Deploying the application..."
      # Check if the Docker image exists locally
      IMAGE_EXISTS=$(docker images -q ${IMAGE}:v1.1.0)
      if [ -z "$IMAGE_EXISTS" ]; then
        echo "Docker image does not exist locally. Build might have failed."
        exit 1
      fi
      echo "Docker image exists locally. Proceeding with deployment."

      # Push Docker image to Docker Hub
      docker push ${IMAGE}:v1.1.0 || { echo "Docker push failed"; exit 1; }

      # Deploy to Heroku
      echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com || { echo "Heroku Docker login failed"; exit 1; }
      docker tag ${IMAGE}:v1.1.0 registry.heroku.com/$HEROKU_APP_NAME/web || { echo "Docker tag failed"; exit 1; }
      docker push registry.heroku.com/$HEROKU_APP_NAME/web || { echo "Docker push to Heroku failed"; exit 1; }
      heroku container:release web --app $HEROKU_APP_NAME || { echo "Heroku release failed"; exit 1; }

      # Deploy to Google Cloud
      echo "Installing Google Cloud SDK..."
      apk add --no-cache google-cloud-cli
      gcloud --version || { echo "Google Cloud SDK installation failed"; exit 1; }

      echo "Authenticating with Google Cloud..."
      echo "${GOOGLE_CLOUD_KEY}" | base64 -d > /tmp/service-account-key.json || { echo "Failed to decode service account key"; exit 1; }
      gcloud auth activate-service-account --key-file=/tmp/service-account-key.json --project=${GOOGLE_CLOUD_PROJECT} || { echo "Google Cloud authentication failed"; exit 1; }

      echo "Deploying to Google Cloud..."
      INSTANCE_NAME="usenlease-instance"
      INSTANCE_EXISTS=$(gcloud compute instances list --filter="name=${INSTANCE_NAME}" --format="value(name)" --project=${GOOGLE_CLOUD_PROJECT})

      if [ "$INSTANCE_EXISTS" = "$INSTANCE_NAME" ]; then
          echo "Instance ${INSTANCE_NAME} already exists. Skipping creation..."
      else
          echo "Instance ${INSTANCE_NAME} does not exist. Creating it..."
          gcloud compute instances create ${INSTANCE_NAME} \
              --project=${GOOGLE_CLOUD_PROJECT} \
              --zone=${GOOGLE_CLOUD_ZONE} \
              --tags=http-server,https-server \
              --metadata=startup-script='#!/bin/bash
              apt-get update
              apt-get install -y docker.io docker-compose
              systemctl start docker
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
              docker pull ${IMAGE}:v1.1.0
              docker-compose up -d' || { echo "Google Cloud instance creation failed"; exit 1; }
      fi

after_script:
  - echo "Cleaning up Docker images..."
  - docker rmi ${IMAGE}:v1.1.0 || true
  - echo "Pipeline completed!"